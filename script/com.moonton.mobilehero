import { logi } from "./logger.js";
import { hook_native, hook_libart, log_tag, MyNativeFunction, stack_trace, dumpLua } from "./jni.js";
import { hook_java, JavaFunctions } from "./java.js";

const HOOK_SO_NAME = "libtolua.so";
const LUA_SAVE_PATH = "/data/data/com.yokaverse.zzxy/lua/";

/**
 * frida -H 192.168.1.74:6666 -f com.moonton.mobilehero -l _agent.js
 * objection -N -h 192.168.1.74 -p 6666 -g com.moonton.mobilehero explore
 * Name                    Path
   ----------------------  ---------------------------------------------------------------------------------------------
   cacheDirectory          /data/user/0/com.moonton.mobilehero/cache
   codeCacheDirectory      /data/user/0/com.moonton.mobilehero/code_cache
   externalCacheDirectory  /storage/emulated/0/Android/data/com.moonton.mobilehero/cache
   filesDirectory          /data/user/0/com.moonton.mobilehero/files
   obbDir                  /storage/emulated/0/Android/obb/com.moonton.mobilehero
   packageCodePath         /data/app/~~tJpbkDuIRfqNe4BQ3UI9lw==/com.moonton.mobilehero-kMRXkyaQm4t5HC6flyqMEQ==/base.apk

*/

const NATIVE_FUNCS: MyNativeFunction[] = [
    // {
    //     so: "libcocos2dlua.so",
    //     targets: [
    //         {
    //             mode: "function",
    //             type: "luaL_loadbuffer",
    //             onEnter: function (args) {
    //                 this.hook = true;
    //                 this.tag = log_tag() + "luaL_loadbuffer";
    //                 logi(`${this.tag} entry`);
    //                 // logi(stack_trace(this.context, this.tag));
    //                 const L = args[0];
    //                 const buff = args[1];
    //                 const size = args[2].toUInt32();
    //                 const name = args[3].readCString();
    //                 logi(`${this.tag} --args:${L}, ${buff}, ${size}, ${name}`);
    //                 if (name) {
    //                     dumpLua(buff, size, name, LUA_SAVE_PATH);
    //                 }
    //                 else {
    //                     console.error("name is null");
    //                 }
    //             },
    //             onLeave: function (retval) {
    //                 if (this.hook) {
    //                     logi(`${this.tag} --return: ${retval}`);
    //                     logi(`${this.tag} leave`);
    //                 }
    //             }
    //         },
    //         {
    //             mode: "function",
    //             type: "luaL_loadbufferx",
    //             onEnter: function (args) {
    //                 this.hook = true;
    //                 this.tag = log_tag() + "luaL_loadbufferx";
    //                 logi(`${this.tag} entry`);
    //                 // logi(stack_trace(this.context, this.tag));
    //                 const L = args[0];
    //                 const buff = args[1].readCString();
    //                 const size = args[2].toUInt32();
    //                 const name = args[3].readCString();
    //                 const mode = args[4].readCString();
    //                 logi(`${this.tag} --args:${L}, ${buff}, ${size}, ${name}, ${mode}`);
    //                 // if(buff) dumpLua(args[1], buff?.length+1, args[0].toString()+ "_buff", LUA_SAVE_PATH);
    //                 // if(name) dumpLua(args[1], name?.length+1, args[0].toString() + "_name", LUA_SAVE_PATH);
    //             },
    //             onLeave: function (retval) {
    //                 if (this.hook) {
    //                     logi(`${this.tag} --return: ${retval}`);
    //                     logi(`${this.tag} leave`);
    //                 }
    //             }
    //         }
    //     ]
    // }
];

const JAVA_METHODS: JavaFunctions[] = [
    // {
    //     class: "java.lang.System",
    //     method: "loadLibrary",
    //     // public static void loadLibrary(String libname)
    //     implementation: function (libname) {
    //         const clazz = "java.lang.System";
    //         const method = "loadLibrary";
    //         const tag = log_tag() + clazz + method;
    //         logi(`${tag} entry`);
    //         logi(`${tag} --args: ${libname}`);
    //         this[method](libname);
    //         logi(`${tag} leave`);
    //     }
    // }
];

setImmediate(() => {
    // hook_libart(HOOK_SO_NAME);
    hook_native(NATIVE_FUNCS);
    hook_java(JAVA_METHODS);
});
